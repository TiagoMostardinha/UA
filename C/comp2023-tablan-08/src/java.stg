module(name,statement) ::= <<
import java.util.*;

public class <name> {
    public static void main(String[] args){
        HashMap\<String, Object\> lambdaMap = new HashMap\<\>();
        <stats(statement)>
    }
}
>>

stats(statement) ::= <<
<if(statement)><statement; separator=";\n"><endif>;
>>

printTable(content, op) ::= <<
<content>.printTable()
>>

print(content, op) ::= <<
System.out.<op>(<content>)
>>

decl(type,var,value, operation, newTable) ::= <<
<type> <var><if(value)> = <value><endif><if(operation)><operation><endif><if(newTable)> = new Table\<\>()<endif>
>>

setName(newName) ::= <<
.setName(<newName>)
>>

setNameParent(table, column, rename) ::= <<
<table><rename>
>>

renameHeader(table,column, newName) ::= <<
<table>.renameHeader("<column>", <newName>)
>>

assign(var,value) ::= <<
<var> = <value>
>>

comment(content) ::= <<
// <content>
>>

self(content) ::= <<
<content>
>>

createTable(tablename, args, newName) ::= <<
Table <tablename> = new Table \<\>(<args; separator=", ">)<if(newName)>;<endif>
<if(newName)><tablename>.setName(<newName>)<endif>
>>

addRow(table, arg1, arg2) ::= <<
<table>.addRow(new Object[] {<if(arg1)><arg1><endif><if(arg2)>, <arg2><endif>})
>>

for(elem, iteratable, stats) ::= <<
for(Object[] <elem> : <iteratable>.getAllRow()){
    <stats; separator=";\n">;
}
>>

read(arg) ::= <<
TabLan.read(<arg>)
>>

new(arg) ::= <<
new ()
>>

calc(exp1, op, exp2) ::= <<
<exp1> <op> <exp2>
>>



parent(expr) ::= <<
( <expr> )
>>

IDID(id1, id2) ::= <<
<id1>.<id2>
>>


teste() ::= <<
TESTE
>>