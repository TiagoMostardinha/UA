// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2021 21:04:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Dec2_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Dec2_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg En;
reg X0;
reg X1;
// wires                                               
wire out0;
wire out1;
wire out2;
wire out3;

// assign statements (if any)                          
Dec2_4 i1 (
// port map - connection between master ports and signals/registers   
	.En(En),
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.out3(out3),
	.X0(X0),
	.X1(X1)
);
initial 
begin 
#1000000 $finish;
end 

// X1
initial
begin
	X1 = 1'b1;
	X1 = #300000 1'b0;
	X1 = #100000 1'b1;
	X1 = #200000 1'b0;
	X1 = #100000 1'b1;
	X1 = #100000 1'b0;
end 

// X0
initial
begin
	X0 = 1'b1;
	X0 = #100000 1'b0;
	X0 = #100000 1'b1;
	X0 = #100000 1'b0;
	X0 = #400000 1'b1;
end 

// En
initial
begin
	En = 1'b1;
	En = #580000 1'b0;
end 
endmodule

