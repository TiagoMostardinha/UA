library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity FSM_Main is
port( clk		: in std_logic;
		rst 	: in std_logic;
		Time_exp : in std_logic;
		esc : in std_logic_vector(1 downto 0);
		Sel_Word : out std_logic_vector(3 downto 0);
		Ledr 		: out std_logic;
		Ledg		: out std_logic;
		debug 	: out std_logic_vector(2 downto 0));
end FSM_Main;

architecture Behavorial of FSM_Main is
type state is (e0,e1,e2,e3,e4,e5,e6);
signal PS,NS : state;
begin

--configuration reset
process(clk) is
begin
	if rising_edge(clk) then
		if rst = '1' then PS <= e0;
		else PS <= NS;
		end if;
	end if;
end process;


--moore code
process(PS,esc)
begin
	Ledr <= '0';
	Ledg <= '0';
	Case PS is
		when e0 => Sel_Word <= "0000"; if Time_exp = '1' then NS <= e1;	end if; debug <= "000";
		when e1 => Sel_Word <= "0001"; if esc = "00" then NS <= e2;		
												elsif esc = "01" then NS <= e3;
												elsif esc = "10" then NS <= e4;
												else NS <= e1;
												end if;
												debug <= "001";
												
		when e2 => Sel_Word <= "0010"; if Time_exp = '1' then NS <= e5; 	end if; debug <= "010";
		when e3 => Sel_Word <= "0011"; if Time_exp = '1' then NS <= e5;	end if; debug <= "011";
		when e4 => Sel_Word <= "0100"; if Time_exp = '1' then NS <= e5;	end if; debug <= "100";
		when e5 => Ledr <= '1' 		  ; if Time_exp = '1' then NS <= e6;	end if; debug <= "101";
		when e6 => Ledg <= '1' 		  ; if Time_exp = '1' then NS <= e1;	end if; debug <= "110";
		--
		when others => Sel_Word <= "0000" ; NS <= PS;
	end case;
end process;
end Behavorial;
		