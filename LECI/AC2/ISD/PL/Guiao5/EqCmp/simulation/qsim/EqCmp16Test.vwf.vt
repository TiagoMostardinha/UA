// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/12/2021 10:44:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EqCmp16Demo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EqCmp16Demo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] in0;
reg [15:0] in1;
// wires                                               
wire out0;

// assign statements (if any)                          
EqCmp16Demo i1 (
// port map - connection between master ports and signals/registers   
	.in0(in0),
	.in1(in1),
	.out0(out0)
);
initial 
begin 
#1000000 $finish;
end 
// in0[ 15 ]
initial
begin
	in0[15] = 1'b0;
	in0[15] = #100000 1'b1;
	in0[15] = #100000 1'b0;
	in0[15] = #20000 1'b1;
	in0[15] = #60000 1'b0;
	in0[15] = #220000 1'b1;
	in0[15] = #300000 1'b0;
	in0[15] = #100000 1'b1;
end 
// in0[ 14 ]
initial
begin
	in0[14] = 1'b0;
	in0[14] = #220000 1'b1;
	in0[14] = #60000 1'b0;
	in0[14] = #220000 1'b1;
	in0[14] = #200000 1'b0;
	in0[14] = #200000 1'b1;
end 
// in0[ 13 ]
initial
begin
	in0[13] = 1'b0;
	in0[13] = #100000 1'b1;
	in0[13] = #100000 1'b0;
	in0[13] = #20000 1'b1;
	in0[13] = #60000 1'b0;
	in0[13] = #20000 1'b1;
	in0[13] = #300000 1'b0;
	in0[13] = #200000 1'b1;
	in0[13] = #100000 1'b0;
end 
// in0[ 12 ]
initial
begin
	in0[12] = 1'b0;
	in0[12] = #100000 1'b1;
	in0[12] = #100000 1'b0;
	in0[12] = #20000 1'b1;
	in0[12] = #60000 1'b0;
	in0[12] = #520000 1'b1;
end 
// in0[ 11 ]
initial
begin
	in0[11] = 1'b1;
	in0[11] = #100000 1'b0;
	in0[11] = #120000 1'b1;
	in0[11] = #60000 1'b0;
	in0[11] = #20000 1'b1;
	in0[11] = #200000 1'b0;
	in0[11] = #200000 1'b1;
	in0[11] = #200000 1'b0;
end 
// in0[ 10 ]
initial
begin
	in0[10] = 1'b0;
	in0[10] = #100000 1'b1;
	in0[10] = #100000 1'b0;
	in0[10] = #20000 1'b1;
	in0[10] = #60000 1'b0;
	in0[10] = #20000 1'b1;
	in0[10] = #100000 1'b0;
	in0[10] = #200000 1'b1;
	in0[10] = #100000 1'b0;
	in0[10] = #100000 1'b1;
	in0[10] = #100000 1'b0;
end 
// in0[ 9 ]
initial
begin
	in0[9] = 1'b1;
	in0[9] = #100000 1'b0;
	in0[9] = #100000 1'b1;
	in0[9] = #300000 1'b0;
end 
// in0[ 8 ]
initial
begin
	in0[8] = 1'b0;
	in0[8] = #220000 1'b1;
	in0[8] = #60000 1'b0;
	in0[8] = #220000 1'b1;
	in0[8] = #400000 1'b0;
end 
// in0[ 7 ]
initial
begin
	in0[7] = 1'b1;
	in0[7] = #100000 1'b0;
	in0[7] = #100000 1'b1;
	in0[7] = #300000 1'b0;
	in0[7] = #200000 1'b1;
	in0[7] = #100000 1'b0;
	in0[7] = #100000 1'b1;
end 
// in0[ 6 ]
initial
begin
	in0[6] = 1'b0;
	in0[6] = #100000 1'b1;
	in0[6] = #300000 1'b0;
	in0[6] = #100000 1'b1;
	in0[6] = #200000 1'b0;
	in0[6] = #100000 1'b1;
end 
// in0[ 5 ]
initial
begin
	in0[5] = 1'b0;
	in0[5] = #100000 1'b1;
	in0[5] = #100000 1'b0;
	in0[5] = #20000 1'b1;
	in0[5] = #60000 1'b0;
	in0[5] = #20000 1'b1;
	in0[5] = #200000 1'b0;
	in0[5] = #400000 1'b1;
end 
// in0[ 4 ]
initial
begin
	in0[4] = 1'b0;
	in0[4] = #100000 1'b1;
	in0[4] = #200000 1'b0;
	in0[4] = #200000 1'b1;
	in0[4] = #200000 1'b0;
	in0[4] = #100000 1'b1;
	in0[4] = #100000 1'b0;
end 
// in0[ 3 ]
initial
begin
	in0[3] = 1'b1;
	in0[3] = #100000 1'b0;
	in0[3] = #100000 1'b1;
	in0[3] = #100000 1'b0;
	in0[3] = #100000 1'b1;
	in0[3] = #100000 1'b0;
	in0[3] = #200000 1'b1;
	in0[3] = #100000 1'b0;
end 
// in0[ 2 ]
initial
begin
	in0[2] = 1'b0;
	in0[2] = #200000 1'b1;
	in0[2] = #100000 1'b0;
	in0[2] = #500000 1'b1;
	in0[2] = #100000 1'b0;
end 
// in0[ 1 ]
initial
begin
	in0[1] = 1'b0;
	in0[1] = #220000 1'b1;
	in0[1] = #60000 1'b0;
	in0[1] = #320000 1'b1;
	in0[1] = #100000 1'b0;
	in0[1] = #100000 1'b1;
	in0[1] = #100000 1'b0;
end 
// in0[ 0 ]
initial
begin
	in0[0] = 1'b0;
	in0[0] = #100000 1'b1;
	in0[0] = #200000 1'b0;
	in0[0] = #100000 1'b1;
	in0[0] = #300000 1'b0;
	in0[0] = #200000 1'b1;
end 
// in1[ 15 ]
initial
begin
	in1[15] = 1'b0;
	in1[15] = #100000 1'b1;
	in1[15] = #100000 1'b0;
	in1[15] = #20000 1'b1;
	in1[15] = #60000 1'b0;
	in1[15] = #20000 1'b1;
	in1[15] = #100000 1'b0;
	in1[15] = #200000 1'b1;
	in1[15] = #100000 1'b0;
	in1[15] = #200000 1'b1;
end 
// in1[ 14 ]
initial
begin
	in1[14] = 1'b0;
	in1[14] = #100000 1'b1;
	in1[14] = #300000 1'b0;
	in1[14] = #500000 1'b1;
end 
// in1[ 13 ]
initial
begin
	in1[13] = 1'b0;
	in1[13] = #220000 1'b1;
	in1[13] = #60000 1'b0;
	in1[13] = #20000 1'b1;
	in1[13] = #300000 1'b0;
	in1[13] = #100000 1'b1;
	in1[13] = #100000 1'b0;
	in1[13] = #100000 1'b1;
end 
// in1[ 12 ]
initial
begin
	in1[12] = 1'b0;
	in1[12] = #100000 1'b1;
	in1[12] = #100000 1'b0;
	in1[12] = #20000 1'b1;
	in1[12] = #60000 1'b0;
	in1[12] = #420000 1'b1;
	in1[12] = #200000 1'b0;
end 
// in1[ 11 ]
initial
begin
	in1[11] = 1'b1;
	in1[11] = #500000 1'b0;
	in1[11] = #100000 1'b1;
	in1[11] = #200000 1'b0;
	in1[11] = #100000 1'b1;
end 
// in1[ 10 ]
initial
begin
	in1[10] = 1'b1;
	in1[10] = #600000 1'b0;
end 
// in1[ 9 ]
initial
begin
	in1[9] = 1'b0;
	in1[9] = #100000 1'b1;
	in1[9] = #300000 1'b0;
	in1[9] = #100000 1'b1;
	in1[9] = #200000 1'b0;
	in1[9] = #200000 1'b1;
end 
// in1[ 8 ]
initial
begin
	in1[8] = 1'b0;
	in1[8] = #100000 1'b1;
	in1[8] = #100000 1'b0;
	in1[8] = #20000 1'b1;
	in1[8] = #60000 1'b0;
	in1[8] = #20000 1'b1;
	in1[8] = #200000 1'b0;
	in1[8] = #100000 1'b1;
	in1[8] = #100000 1'b0;
	in1[8] = #100000 1'b1;
	in1[8] = #100000 1'b0;
end 
// in1[ 7 ]
initial
begin
	in1[7] = 1'b0;
	in1[7] = #100000 1'b1;
	in1[7] = #100000 1'b0;
	in1[7] = #20000 1'b1;
	in1[7] = #60000 1'b0;
	in1[7] = #120000 1'b1;
	in1[7] = #300000 1'b0;
	in1[7] = #200000 1'b1;
end 
// in1[ 6 ]
initial
begin
	in1[6] = 1'b1;
	in1[6] = #300000 1'b0;
	in1[6] = #400000 1'b1;
	in1[6] = #200000 1'b0;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b0;
	in1[5] = #220000 1'b1;
	in1[5] = #60000 1'b0;
	in1[5] = #220000 1'b1;
	in1[5] = #100000 1'b0;
	in1[5] = #300000 1'b1;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b1;
	in1[4] = #100000 1'b0;
	in1[4] = #120000 1'b1;
	in1[4] = #60000 1'b0;
	in1[4] = #20000 1'b1;
	in1[4] = #100000 1'b0;
	in1[4] = #100000 1'b1;
	in1[4] = #100000 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b0;
	in1[3] = #200000 1'b1;
	in1[3] = #300000 1'b0;
	in1[3] = #100000 1'b1;
	in1[3] = #200000 1'b0;
	in1[3] = #100000 1'b1;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b1;
	in1[2] = #100000 1'b0;
	in1[2] = #120000 1'b1;
	in1[2] = #60000 1'b0;
	in1[2] = #20000 1'b1;
	in1[2] = #200000 1'b0;
	in1[2] = #100000 1'b1;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b1;
	in1[1] = #100000 1'b0;
	in1[1] = #120000 1'b1;
	in1[1] = #60000 1'b0;
	in1[1] = #220000 1'b1;
	in1[1] = #100000 1'b0;
	in1[1] = #100000 1'b1;
	in1[1] = #100000 1'b0;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b1;
	in1[0] = #100000 1'b0;
	in1[0] = #120000 1'b1;
	in1[0] = #60000 1'b0;
	in1[0] = #20000 1'b1;
	in1[0] = #200000 1'b0;
	in1[0] = #200000 1'b1;
end 
endmodule

